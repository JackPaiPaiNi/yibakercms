#jndi-name: 数据源的名称
jdbc-0.proxool.jndi-name=
jdbc-0.proxool.alias=jdbc_pool
jdbc-0.proxool.driver-url=jdbc:mysql://192.168.7.32:3306/yibaker_data?useUnicode=true&characterEncoding=utf8
#jdbc-0.proxool.driver-url=jdbc:mysql://localhost:3306/yibaker_data?useUnicode=true&characterEncoding=utf8
#jdbc-0.proxool.driver-url=jdbc:mysql://10.66.112.193:3306/yibaker_test?useUnicode=true&characterEncoding=utf8&autoReconnect=true
jdbc-0.proxool.driver-class=com.mysql.jdbc.Driver
jdbc-0.proxool.username=root
#jdbc-0.proxool.password=toor
jdbc-0.proxool.password=Password%123
##house keeper 保留线程处于睡眠状态的最长时间,house keeper 的职责就是检查各个连接的状态,并判断是否需要销毁或者创建.
jdbc-0.proxool.house-keeping-sleep-time=60000
##如果发现了空闲的数据库连接.house keeper 将会用这个语句来测试.这个语句最好非常快的被执行.如果没有定义,测试过程将会被忽略。
jdbc-0.proxool.house-keeping-test-sql=select CURRENT_DATE
##连接池中可用的连接数量.如果当前的连接池中的连接少于这个数值.新的连接将被建立(假设没有超过最大可用数).
jdbc-0.proxool.prototype-count=3
##如果housekeeper 检测到某个线程的活动时间大于这个数值.它将会杀掉这个线程.所以确认一下你的服务器的带宽.然后定一个合适的值.默认是5分钟
jdbc-0.proxool.maximum-active-time=60000
##最小的数据库连接数
jdbc-0.proxool.minimum-connection-count=10
##最大的数据库连接数
jdbc-0.proxool.maximum-connection-count=30
##一个线程的最大寿命
jdbc-0.proxool.maximum-connection-lifetime=18000000
##连接池使用状况统计。 参数“10s,1m,1d”
jdbc-0.proxool.statistics=30s
##志统计跟踪类型。 参数“ERROR”或 “INFO”
jdbc-0.proxool.statistics-log-level=INFO
#如果为true,那么每个被执行的SQL语句将会在执行期被log记录(DEBUG LEVEL).你也可以注册一个ConnectionListener (参看ProxoolFacade)得到这些信息
jdb-0.proxool.trace=true
#详细信息设置。 参数 bool 值
jdb-0.proxool.verbose =true 

#fatal-sql-exception: 它是一个逗号分割的信息片段.当一个SQL异常发生时,他的异常信息将与这个信息片段进行比较.如果在片段中存在,那么这个异常将被认为是个致命错误(Fatal SQL Exception ).这种情况下,数据库连接将要被放弃.无论发生什么,这个异常将会被重掷以提供给消费者.用户最好自己配置一个不同的异常来抛出.
#fatal-sql-exception-wrapper-class:正如上面所说,你最好配置一个不同的异常来重掷.利用这个属性,用户可以包装SQLException,使他变成另外一个异常.这个异常或者继承SQLException或者继承字RuntimeException.proxool自带了2个实现:'org.logicalcobwebs.proxool.FatalSQLException' 和'org.logicalcobwebs.proxool.FatalRuntimeException' .后者更合适.
#injectable-connection-interface: 允许proxool实现被代理的connection对象的方法.
#injectable-statement-interface: 允许proxool实现被代理的Statement 对象方法.
#injectable-prepared-statement-interface: 允许proxool实现被代理的PreparedStatement 对象方法.
#injectable-callable-statement-interface: 允许proxool实现被代理的CallableStatement 对象方法.
#jmx: 略
#jmx-agent-id: 略
#overload-without-refusal-lifetime: 略
#recently-started-threshold:  略
#simultaneous-build-throttle:  略
#test-before-use: 略
#test-after-use: 略
#trace: 如果为true,那么每个被执行的SQL语句将会在执行期被log记录(DEBUG LEVEL).你也可以注册一个ConnectionListener (参看ProxoolFacade)得到这些信息.
#verbose: 详细信息设置。 参数 bool 值